#public com.mojang.blaze3d.preprocessor.GlslPreprocessor$Context

# Pose Helper
public net.minecraft.client.renderer.GameRenderer getFov(Lnet/minecraft/client/Camera;FZ)D
public net.minecraft.client.renderer.ItemInHandRenderer renderPlayerArm(Lcom/mojang/blaze3d/vertex/PoseStack;Lnet/minecraft/client/renderer/MultiBufferSource;IFFLnet/minecraft/world/entity/HumanoidArm;)V

# Shader Instance Wrapper
public net.minecraft.client.renderer.ShaderInstance uniformMap
public com.mojang.blaze3d.platform.GlStateManager$TextureState
public com.mojang.blaze3d.platform.GlStateManager TEXTURES
public com.mojang.blaze3d.shaders.Program <init>(Lcom/mojang/blaze3d/shaders/Program$Type;ILjava/lang/String;)V # <init>

# Shader Program Cache
public net.minecraft.client.renderer.EffectInstance lastProgramId # lastProgramId
public net.minecraft.client.renderer.ShaderInstance lastProgramId # lastProgramId

# Uniform Wrapper
public-f com.mojang.blaze3d.shaders.Uniform set(F)V
public-f com.mojang.blaze3d.shaders.Uniform set(FF)V
public-f com.mojang.blaze3d.shaders.Uniform set(IF)V
public-f com.mojang.blaze3d.shaders.Uniform set(FFF)V
public-f com.mojang.blaze3d.shaders.Uniform set(Lorg/joml/Vector3f;)V
public-f com.mojang.blaze3d.shaders.Uniform set(FFFF)V
public-f com.mojang.blaze3d.shaders.Uniform set(Lorg/joml/Vector4f;)V
public-f com.mojang.blaze3d.shaders.Uniform setSafe(FFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setSafe(IIII)V
public-f com.mojang.blaze3d.shaders.Uniform set(I)V
public-f com.mojang.blaze3d.shaders.Uniform set(II)V
public-f com.mojang.blaze3d.shaders.Uniform set(III)V
public-f com.mojang.blaze3d.shaders.Uniform set(IIII)V
public-f com.mojang.blaze3d.shaders.Uniform set([F)V
public-f com.mojang.blaze3d.shaders.Uniform setMat2x2(FFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat2x3(FFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat2x4(FFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat3x2(FFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat3x3(FFFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat3x4(FFFFFFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat4x2(FFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat4x3(FFFFFFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform setMat4x4(FFFFFFFFFFFFFFFF)V
public-f com.mojang.blaze3d.shaders.Uniform set(Lorg/joml/Matrix4f;)V
public-f com.mojang.blaze3d.shaders.Uniform set(Lorg/joml/Matrix3f;)V

# Deferred Renderer
public net.minecraft.client.renderer.RenderType$CompositeRenderType state()Lnet/minecraft/client/renderer/RenderType$CompositeState;
public com.mojang.blaze3d.vertex.BufferUploader lastImmediateBuffer

# Quasar
public net.minecraft.resources.RegistryDataLoader$Loader
public net.minecraft.resources.RegistryDataLoader createContext(Lnet/minecraft/core/RegistryAccess;Ljava/util/List;)Lnet/minecraft/resources/RegistryOps$RegistryInfoLookup;

# Dynamic Render Types
public net.minecraft.client.renderer.RenderType create(Ljava/lang/String;Lcom/mojang/blaze3d/vertex/VertexFormat;Lcom/mojang/blaze3d/vertex/VertexFormat$Mode;IZZLnet/minecraft/client/renderer/RenderType$CompositeState;)Lnet/minecraft/client/renderer/RenderType$CompositeRenderType;
public net.minecraft.client.renderer.RenderType$CompositeRenderType
public net.minecraft.client.renderer.RenderStateShard$EmptyTextureStateShard
public net.minecraft.client.renderer.RenderStateShard$TransparencyStateShard
public net.minecraft.client.renderer.RenderStateShard$DepthTestStateShard
public net.minecraft.client.renderer.RenderStateShard$CullStateShard
public net.minecraft.client.renderer.RenderStateShard$LightmapStateShard
public net.minecraft.client.renderer.RenderStateShard$OverlayStateShard
public net.minecraft.client.renderer.RenderStateShard$LayeringStateShard
public net.minecraft.client.renderer.RenderStateShard$OutputStateShard
public net.minecraft.client.renderer.RenderStateShard$ShaderStateShard
public net.minecraft.client.renderer.RenderStateShard$TextureStateShard
public net.minecraft.client.renderer.RenderStateShard$TexturingStateShard
public net.minecraft.client.renderer.RenderStateShard$WriteMaskStateShard
public net.minecraft.client.renderer.RenderStateShard$LineStateShard
public net.minecraft.client.renderer.RenderStateShard$ColorLogicStateShard
public net.minecraft.client.renderer.RenderStateShard$OffsetTexturingStateShard
public net.minecraft.client.renderer.RenderStateShard$MultiTextureStateShard
public net.minecraft.client.renderer.RenderType$OutlineProperty
public net.minecraft.client.renderer.RenderType$CompositeState

# VertexFormat
public-f com.mojang.blaze3d.vertex.VertexFormatElement BY_ID

# Resource Manager
public net.minecraft.client.resources.model.AtlasSet$AtlasEntry

# Block Model Bakery
public net.minecraft.client.resources.model.ModelBakery ITEM_MODEL_GENERATOR

# Level Perspective Occlusion Graph
public net.minecraft.client.renderer.ViewArea getRenderSectionAt(Lnet/minecraft/core/BlockPos;)Lnet/minecraft/client/renderer/chunk/SectionRenderDispatcher$RenderSection; # getRenderSectionAt